################################################################################
#                                                                              #
#     APLICAÇÃO DO MÉTODO AHP-GAUSSIANO NA ESCOLHA DE AÇÕES LISTADAS NA B3     #
#                                                                              #
################################################################################

# TCC - MBA USP-Esalq
# Turma: DSA 212
# Título: Aplicação do método Analytic Hierarchy Process Gaussiano na elaboração
#         de carteira acionária do mercado financeiro
# Nome: Clayton Del Tedesco Júnior
# Data inicial: 22/01/2023
# Data final: 

# Contador utilizado para montar o arquivo com a carteira de ações
n_shares = 1

# Cria um dataframe vazio para alocar as melhores ações
bestShares <- data.frame()

# Carrega uma primiera vez fora do loop para obter o cabeçlho do data frame a ser formado
sector <- read.csv("C:/Users/sn1080773/Desktop/TCC/TCC 2/Base de Dados/Setor 1.csv",
                   header = TRUE,
                   sep = ";",
                   dec = ",")

# Atribui o cabeçalho ao dataframe das melhores ações
bestShares <- sector[0, ]

# Variáveis monotônicas de custo que serão utilizadas os seus inversos:
# "Cotação", "P.L", "PSR", "P.EBIT", "Dív.Brut..Patrim."
cols_to_inverse = c('Cotação', 'P.L', 'PSR', 'P.Cap.Giro', 'P.Ativo', 'P.EBIT', 'Dív.Brut..Patrim.')

# Foram considerados os 43 subsetores pertencentes à B3 (mesmo que vazios)
for (i in 1:43){
  i=2
  # Caminho para abertura dos arquivos contendo as ações de cada setor
  PATH <- sprintf("C:/Users/sn1080773/Desktop/TCC/TCC 2/Base de Dados/Setor %s.csv", i)
  
  # Carrega a tabela contando as ações
  sector <- read.csv(PATH,
                     header = TRUE,
                     sep = ";",
                     dec = ",")
  
  # Verifica se a tabela não está vazia (setor sem nenhuma ação ativa no momento)
  if (nrow(sector) > 0){
    
    # Mantem o dataframe original criando um novo dataframe para cálculos
    sector_df <- sector
    
    # Transforma variáveis monotônicas de custo em seu inverso:
    sector_df[cols_to_inverse] <- sector_df[cols_to_inverse]^(-1)
    
#---------------Realiza o quadrado para variáveis negativas invertidas:----------------#
#---------------"P.L", "PSR", "P.EBIT", "P.Cap.Giro", "Dív.Brut..Patrim."--------------#
    filter_PL <- sector_df[sector_df$P.L < 0, ]
    filter_PL$P.L <- filter_PL$P.L^2
    sector_df[sector_df$P.L < 0, ] <- filter_PL
    
    filter_PSR <- sector_df[sector_df$PSR < 0, ]
    filter_PSR$PSR <- filter_PSR$PSR^2
    sector_df[sector_df$PSR < 0, ] <- filter_PSR
    
    filter_PCAPGIRO <- sector_df[sector_df$P.Cap.Giro < 0, ]
    filter_PCAPGIRO$P.Cap.Giro <- filter_PCAPGIRO$P.Cap.Giro^2
    sector_df[sector_df$P.Cap.Giro < 0, ] <- filter_PCAPGIRO
    
    filter_PEBIT <- sector_df[sector_df$P.EBIT < 0, ]
    filter_PEBIT$P.EBIT <- filter_PEBIT$P.EBIT^2
    sector_df[sector_df$P.EBIT < 0, ] <- filter_PEBIT
    
    filter_DIVBRUTPATRIM <- sector_df[sector_df$Dív.Brut..Patrim. < 0, ]
    filter_DIVBRUTPATRIM$Dív.Brut..Patrim. <- filter_DIVBRUTPATRIM$Dív.Brut..Patrim.^2
    sector_df[sector_df$Dív.Brut..Patrim. < 0, ] <- filter_DIVBRUTPATRIM
#--------------------------------------------------------------------------------------#
    
#-------------------Transforma variáveis de porcentagem para decimal-------------------#
    sector_df$Div.Yield <- parse_number(sector_df$Div.Yield)/10000
    sector_df$Mrg.Ebit <- parse_number(sector_df$Mrg.Ebit)/10000
    sector_df$Mrg..Líq. <- parse_number(sector_df$Mrg..Líq.)/10000
    sector_df$ROIC <- parse_number(sector_df$ROIC)/10000
    sector_df$ROE <- parse_number(sector_df$ROE)/10000
    sector_df$Cresc..Rec.5a <- parse_number(sector_df$Cresc..Rec.5a)/10000
#--------------------------------------------------------------------------------------#

#---------------Trata valores negativos antes de realizar a normalização---------------#    
    negatives_to_inverse = c('P.VP', 'P.Ativ Cirq.Liq', 'EV.EBIT', 'EV.EBITDA', 'Mrg.Ebit', 'ROIC', 'ROE' )
#-------------Normaliza as variáveis pelo método de Min-Max Normalixation--------------#
    sector_df_norm <- data.Normalization(sector_df, type = "n4")

    
    # Filtra o dataframe sector para deixar na primeira linha a melhor ação
    
    
    # Salva a melhor ação do setor no dataframe bestShares
    bestShares[n_shares, ] <- sector[1, ]
    n_shares = n_shares + 1
  }
}


# Cria o arquivo com o dataframe das melhores ações
write_xlsx(bestShares, "bestShares.xlsx", format_headers = TRUE)

# Cria o arquivo com somente com as as siglas das ações
write_xlsx(bestShares[c(1)], "Wallet.xlsx", format_headers = TRUE)
